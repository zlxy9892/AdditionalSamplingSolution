dd2_16
dd2_23
boxplot(dd1_12, dd2_16, dd3_23)
boxplot(dd1_12, dd1_16, dd1_23)
boxplot(dd1_12$V1, dd1_16$V1, dd1_23$V1)
boxplot(dd2_12$V1, dd2_16$V1, dd2_23$V1, add = T)
boxplot(dd2_12$V1, dd2_16$V1, dd2_23$V1, col = tomato add = T)
boxplot(dd2_12$V1, dd2_16$V1, dd2_23$V1, col = tomato, add = T)
boxplot(dd2_12$V1, dd2_16$V1, dd2_23$V1, col = 'tomato', add = T)
boxplot(dd1_12$V1, dd1_16$V1, dd1_23$V1, col = 'steelblue')
boxplot(dd2_12$V1, dd2_16$V1, dd2_23$V1, col = 'tomato', add = T)
ds2 = read.csv('E:/zl2.csv', header = F)
ds2 = read.csv('E:/zl2.csv', header = F)
ds2 = read.csv('E:/zl22.csv', header = F)
plot(ds2$V1,ds2$V2)
mean(ds2$V1)
ds2 = read.csv('E:/zl22.csv', header = T)
mean(ds2$V1)
q()
x = c(1:10)
y = x
plot(x,y)
plot(x,y)
library(gstat)
?idw
?idw
?idw
meuse
data(meuse)
library(sp)
library(sp)
library(gstat)
data(meuse)
meuse
View(meuse)
plot(meuse$x, meuse$y)
plot(meuse)
plot(meuse, asp=1)
plot(meuse, asp=1, cex=4*meuse$zinc/max(meuse$zinc), pch=1, col=meuse$ffreq)
plot(coordinates(meuse), asp=1)
library(ggplot2)
library(grid)
library(ggplot2)
library(ggplot2)
library(ggplot2)
as.geodata
library(geoR)
?density()
getCriterion <- function(n, bnds, costs, sigma2, maxC, ratio){
cclass<-findInterval(costs,bnds)
cclass <- as.factor(cclass)
Nh <- tapply(costs,INDEX=cclass,FUN=length)
meanc.h <- tapply(costs,INDEX=cclass,FUN=mean)
sqrtmeanc.h <- sqrt(meanc.h)
nh <- n*(Nh/sqrtmeanc.h)/sum(Nh/sqrtmeanc.h)
if(sum(nh<2)>0){
ids <- which(nh<2)
nh[ids] <- 2
nreduced <- n-length(ids)*2
nh[-ids] <- nreduced*( (Nh[-ids]/sqrtmeanc.h[-ids]) / sum(Nh[-ids]/sqrtmeanc.h[-ids]))
}
C <- sum(nh*meanc.h)
wh <- Nh/sum(Nh)
V <- sum(wh^2*sigma2/nh)
VC <- V + (C  > maxC) * (C-maxC) * ratio
return(list(C=C,V=V,VC=VC,nh=nh))
}
permute.c<-function(bnds, costs)  {
minbndsmax <- c(min(costs),bnds,max(costs))
# randomly select one stratum boundary from the L-1 boundaries
id <- sample(x = seq_len(length(bnds)), size = 1)
id1 <- id+1
lbnd.window <- minbndsmax[id1-1]
ubnd.window <- minbndsmax[id1+1]
bnds[id] <- runif(n=1,min=lbnd.window,max=ubnd.window)
return(bnds)
}
permute.n<-function(n_cur, n, window)  {
lbnd.window <- max(n_cur-window,min(n))
ubnd.window <- min(n_cur+window,max(n))
n <- sample(x=seq(from=lbnd.window,to=ubnd.window,by=1),size=1)
return(n)
}
anneal<-function(samplesizes, bnds, costs, sigma2, maxC, ratio,
window,
initialTemperature = 1,
coolingRate = 0.95,
maxAccepted = 20 * length(bnds),
maxPermuted=20*length(bnds),
maxNoChange=20*length(bnds),
verbose = getOption("verbose")) {
# set initial temperature
T <- initialTemperature
# compute the criterion for first value of sample size n
n <- samplesizes[1]
result <- getCriterion(n,bnds,costs,sigma2,maxC,ratio)
# store stratum boundaries and output of function getCriterion
#  bnds_cur <- bnds
#  result_cur <- result
# Define structure for storing trace of criterion
trace<-NULL
# initialize number of zero changes of objective function
nNoChange <-0
# start cooling loop
repeat{
# initialize number of accepted configurations
nAccepted <- 0
# initialize number of permuted configurations
nPermuted <- 0
# initialize number of improved configurations
nImproved <- 0
# start permutation loop
repeat {
# increase the number of permutations
nPermuted <- nPermuted + 1
# propose new stratum boundaries
bnds_p <- permute.c(bnds, costs)
# propose new total sample size
n_p <- permute.n(n,samplesizes,window)
# compute the criterion of this new stratification
result_p <- getCriterion(n_p, bnds_p, costs, sigma2, maxC, ratio)
# accept/reject proposal by means of Metropolis criterion
delta <- result_p$VC - result$VC
if (delta < 0) {
nImproved <- nImproved + 1
p <- 1 # always accept improvements
} else {
p <- exp(-delta / T) # use Boltzmann to judge if deteriorations should be accepted
}
u <- runif(n = 1) # draw uniform deviate
if (u < p) { # accept proposal
nAccepted <- nAccepted + 1
bnds <- bnds_p
n <- n_p
result <- result_p
}
# are conditions met to lower temperature?
lowerTemperature <- (nPermuted == maxPermuted) |
(nAccepted == maxAccepted)
if (lowerTemperature) {
if (nImproved==0)
{nNoChange<-nNoChange+1}
else
{nNoChange<-0}
trace<-rbind(trace,cbind(result$C,result$V,result$VC))
break
}
}
if (verbose) {
cat(
format(Sys.time()), "|",
sprintf("T = %e  C = %e  permuted = %d  accepted = %d  improved = %d  acceptance rate = %f  \n",
T, result$VC, nPermuted, nAccepted, nImproved, nAccepted / nPermuted)
)
}
# check on convergence
if (nNoChange == maxNoChange) {
break
}
result_cur <- result
bnds_cur <- bnds
# lower temperature
T <- coolingRate * T
}
# return result
list(
optbnds=bnds_cur,trace=trace,samplesizes=result_cur$nh
)
}
library(lattice)
library(ggplot2)
library(reshape2)
set.seed(314)
N<-10000
e <- rnorm(N,sd=4)
ae <- abs(e)
e2 <- e^2
set.seed(314)
#mean of gamma distribution: shape/rate
#variance: shape/rate^2
#c1 <- rgamma(N, shape = 1, rate=1/10)
#histogram(c1)
#summary(c1)
c<-rexp(N, rate =0.1)
c <- c+10
histogram(c)
summary(c)
mean(c)
var(c)
n <- 200
VME.SI <- var(e)/n
VMAE.SI <- var(ae)/n
VMSE.SI <- var(e2)/n
meanc <- mean(c)
# expected total costs SI
totcSI <- meanc*n
(VSI.C <- n*var(c))
source('AnnealingFunctions4OptStratification_v3.R')
# set number of strata
L <- 10
# compute population variance of the errors
sigma2.e = var(e)
sigma2.ae = var(ae)
#sigma2.e2 = var(e2)
sd <- 4
sigma2.e2 <- sd^4*2
# compute initial boundaries of strata of equal size
interval <- 1/L
prob <- seq(from=interval,to=(1-interval),by=interval)
bnds_ini <- quantile(c,probs=prob)
names(bnds_ini) <- NULL
ratio <- (sigma2.e2/n)/(n*mean(c))
#half length of window for choosing new total sample size
window <- 5
samplesizes <- seq(from=n,to=(n*2),by=1)
set.seed(314)
annealres <- anneal(
samplesizes = samplesizes,
bnds = bnds_ini,
costs = c,
sigma2 = sigma2.e2,
maxC = totcSI,
ratio=ratio,
window = window,
initialTemperature = 0.03,
coolingRate = 0.95,
maxPermuted = 25*length(bnds_ini),
maxAccepted = 25*length(bnds_ini),
maxNoChange= 25,
verbose = TRUE
)
# check whether there are strata with only one population unit. If so, reduce number of strata.
(bnds <- annealres$optbnds)
cclass<-findInterval(c,bnds)
cclass <- as.factor(cclass)
(Nh <- tapply(c,INDEX=cclass,FUN=length))
(nh <- round(annealres$samplesizes))
(neqSTSI=sum(nh))
# check whether expected total costs are equal to that of SI
(meanc.h <- tapply(c,INDEX=cclass,FUN=mean))
(C <- sum(annealres$samplesizes*meanc.h))
(totcSI)
(C-totcSI)
# compute variance of estimated mean and relative precision
wh <- Nh/sum(Nh)
(VMSE.STSI <- sum(wh^2*sigma2.e2/annealres$samplesizes))
(RpMSE.STSI <- VMSE.SI/VMSE.STSI)
R <- 50000
meSTSI <- maeSTSI <- mseSTSI <- numeric(length=R)
df$optstratum <- as.numeric(cclass)
cclass
as.numeric(cclass)
class(df)
?rexp
c<-rexp(100000, rate = 0.1)
c
c = c+10
hist(c)
histogram(c)
hist(c)
hist(c, breaks = 20)
library(ggplot2)
ggplot(data = c) +
geom_histogram(binwidth = 0.1)
dd = data.frame(c)
ggplot(data = dd) +
geom_histogram(binwidth = 0.1)
ggplot(data = dd) +
geom_histogram(aes(y = ..dd..) = binwidth = 0.1)
ggplot() +
geom_histogram(aes(y = ..dd..) = binwidth = 0.1)
ggplot() +
geom_histogram(aes(y =dd) = binwidth = 0.1)
ggplot() +
geom_histogram(aes(y =dd), binwidth = 0.1)
ggplot() +
geom_histogram(aes(y =dd))
ggplot() +
geom_histogram(aes(y =c))
ggplot(dd) +
geom_histogram(breaks=breaks,
aes(x=vector,
y=..density..))
ggplot(dd) +
geom_histogram(aes(x=vector, y=..density..))
hist(c, lims(0, 120))
hist(c, xlim = c(0, 120))
df = read.table('E:/pr_acc_0.2-1.0.txt')
df = read.table('E:/pr_acc_0.2-1.0.txt')
df = read.table('E:/pr_acc_0.2-1.0.txt')
?read.table
df = read.table('E:/pr_acc_0.2-1.0.txt', header = F, sep = ' ')
df = read.table('E:/pr_acc_0.2-1.0.txt', header = F)
df = read.table('E:/pr_acc_0.2-1.0.csv', header = F)
View(df)
df = read.table('E:/pr_acc_0.2-1.0.csv', header = F, sep = ',')
View(df)
cor.test(df$V1, df$V2, method="pearson")
ggplot(data = df) +
geom_point(mapping = aes(x=V1, y=V2))
library(ggplot2)
ggplot(data = df) +
geom_point(mapping = aes(x=V1, y=V2))
cor.test(df$V1, df$V2, method="pearson")
?cor
cov(df$V1, df$V2)
cov(df$V1, df$V2, method = "pearson")
cor(df$V1, df$V2)
cor(df$V1, df$V2, method = "pearson")
cor(df$V1, df$V2, method = "spearman")
cor(df$V1, df$V2, method = "kendall")
df = read.table('E:/a.csv', header = F, sep = ',')
ggplot(data = df) +
geom_point(mapping = aes(x=V1, y=V2))
df = read.table('E:/a.txt', header = F, sep = ',')
ggplot(data = df) +
geom_point(mapping = aes(x=V1, y=V2))
View(df)
df = read.table('E:/a.txt', header = F, sep = '\t')
View(df)
ggplot(data = df) +
geom_point(mapping = aes(x=V1, y=V2))
View(df)
View(df)
cor.test(df$V1, df$V2, method="pearson")
read.csv("E:/output_heshan.csv", header = T)
df = read.csv("E:/output_heshan.csv", header = T)
plot(df$Density, df$DSimi)
plot(df$Density, log(df$DSimi))
df = read.csv("E:/MyWork/myres/master_thesis/code/data/heshan/output_heshan_0.8.csv", header = T)
plot(df$Density, log(df$DSimi))
plot(df$Density, df$DSimi)
df = read.csv("E:/MyWork/myres/master_thesis/code/data/heshan/output_heshan_0.9.csv", header = T)
plot(df$Density, df$DSimi)
install.packages(RandomForest)
install.packages(randomForest)
install.packages('randomForest')
library(randomForest)
?randomForest
df = read.csv('./compare_raf_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=推测精度, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="推测精度", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(0,0.8))+
scale_y_continuous(breaks=seq(0.0, 0.8, 0.2))
setwd("E:/MyWork/myres/master_thesis/code/AdditionalSamplingSolution/analysis")
df = read.csv('./compare_raf_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=推测精度, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="推测精度", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(0,0.8))+
scale_y_continuous(breaks=seq(0.0, 0.8, 0.2))
library(ggplot2)
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=推测精度, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="推测精度", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(0,0.8))+
scale_y_continuous(breaks=seq(0.0, 0.8, 0.2))
View(df)
df = read.csv('./compare_raf_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=推测精度, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="推测精度", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(0,0.8))+
scale_y_continuous(breaks=seq(0.0, 0.8, 0.2))
df = read.csv('./compare_raf_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=推测精度, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="推测精度", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(0,0.8))+
scale_y_continuous(breaks=seq(0.0, 0.8, 0.2))
df = read.csv('./compare_raf_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=推测精度, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="推测精度", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(0,0.8))+
scale_y_continuous(breaks=seq(0.0, 0.8, 0.2))
df = read.csv('./compare_raf_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=推测精度, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="推测精度", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(0,0.8))+
scale_y_continuous(breaks=seq(0.0, 0.8, 0.2))
df = read.csv('./compare_raf_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=推测精度, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="推测精度", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(0,0.8))+
scale_y_continuous(breaks=seq(0.0, 0.8, 0.2))
df = read.csv('./compare_xc_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=RMSE, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="RMSE", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(8,10))+
scale_y_continuous(breaks=seq(8.0, 10.0, 0.5))
df = read.csv('./compare_xc_acc_ipsm.csv')
df = read.csv('./compare_xc_acc_ipsm.csv')
df$补样数量 = factor(df$补样数量)
colors<-c('#CCCCCC','#5CACEE','#FF6A6A')
ggplot(data=df)+
geom_boxplot(mapping = aes(x=补样数量, y=RMSE, fill=补样方法))+
scale_fill_manual(values = colors)+
labs(x="补样数量", y="RMSE", title = "")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5),
axis.title.x = element_text(size=14, face = 'bold'),
axis.title.y = element_text(size=14, face = 'bold'),
legend.position = 'none',
legend.text = element_text(size = 13, face = 'bold'),
legend.title = element_blank()
)+
coord_cartesian(ylim=c(8,10))+
scale_y_continuous(breaks=seq(8.0, 10.0, 0.5))
